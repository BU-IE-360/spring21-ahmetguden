set_evds_key("TX5OzOJpfZ")
cpi_import <- as.data.frame(get_series(series= c("TP.FG.J0"), start_date="15-01-2018" , end_date="15-01-2021"))
cpi_import <- as.data.frame(get_series(series= c("TP.FG.J0"), start_date="15-01-2018" , end_date="15-01-2021"))
devtools::install_github("algopoly/EVDS")
set_evds_key("TX5OzOJpfZ")
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
cpi_import <- as.data.frame(get_series(series= c("TP.FG.J0"), start_date="15-01-2018" , end_date="15-01-2021"))
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
devtools::install_github("algopoly/EVDS")
set_evds_key("TX5OzOJpfZ")
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
?get_series
get_series(series = c("TP.AKONUTSAT2.TOPLAM"), start_date = 03-2011,end_date = 03-2021)
set_evds_key("TX5OzOJpfZ")
get_series(series = c("TP.AKONUTSAT2.TOPLAM"), start_date = 03-2011,end_date = 03-2021)
get_series(series = c("TP.AKONUTSAT2.TOPLAM"), start_date = 01-03-2011,end_date = 01-03-2021)
get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = 01-03-2011,end_date = 01-03-2021)
get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2011",end_date ="01-03-2021")
df <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2011",end_date ="01-03-2021"))
df
df <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
df
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
library(lubridate)
devtools::install_github("algopoly/EVDS")
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
devtools::install_github("algopoly/EVDS")
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
df
df1
df2 <- df1[2:3]
df2
df2 <- df1[,2:3]
df2
ggplot(df2,aes(x=items.Tarih, y=items.TP_AKONUTSAT2_TOPLAM))
ggplot(df2,aes(x=items.Tarih, y=items.TP_AKONUTSAT2_TOPLAM)) +
geom_point()
ggplot(df2,aes(x=items.Tarih, y=items.TP_AKONUTSAT2_TOPLAM)) +
geom_point()
ggplot(df2,aes(x=items.Tarih, y=items.TP_AKONUTSAT2_TOPLAM)) +
geom_point()
df2[,2] <- as.numeric(df[,2])
df2$items.TP_AKONUTSAT2_TOPLAM <- as.numeric(df2$items.TP_AKONUTSAT2_TOPLAM)
ggplot(df2,aes(x=items.Tarih, y=items.TP_AKONUTSAT2_TOPLAM)) +
geom_point()
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%m-%Y")
df2$items.Tarih
df2 <- df1[,2:3]
View(df2)
View(df1)
View(df1)
View(df2)
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%M")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
df2$items.Tarih <- as.Date(df2$items.Tarih, format = "%Y-%m")
df2$items.Tarih
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
install.packages("devtools")
devtools::install_github("algopoly/EVDS")
set_evds_key("TX5OzOJpfZ")
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
install.packages("devtools")
install.packages("devtools")
devtools::install_github("algopoly/EVDS")
force = TRUE
devtools::install_github("algopoly/EVDS",force=TRUE)
dolar_evds<- na.omit(dolar_import[,2:3])
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
dolar_evds<- na.omit(dolar_import[,2:3])
1
devtools::install_github("algopoly/EVDS")
library(EVDS)
set_evds_key("TX5OzOJpfZ")
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
dolar_evds<- na.omit(dolar_import[,2:3])
colnames(dolar_evds) <-  c("Date" , "ExchangeRate")
dolar_evds$Date <-as.Date(dolar_evds$Date, format= "%d-%m-%Y")
dolar_evds$ExchangeRate <- as.numeric(dolar_evds$ExchangeRate)
head(dolar_evds)
set_evds_key("TX5OzOJpfZ")
library(zoo)
library(tidyverse)
library(EVDS)
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
library(devtools)
install.packages("usethis")
install.packages("usethis")
set_evds_key("TX5OzOJpfZ")
library(EVDS)
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
devtools::install_github("algopoly/EVDS")
devtools::install_github("algopoly/EVDS", force=T)
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
library(devtools)
install.packages("usethis")
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
library(EVDS)
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
library(EVDS)
library(EVDS)
set_evds_key("TX5OzOJpfZ")
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
library(EVDS)
library(tidyverse)
library(lubridate)
library(zoo)
set_evds_key("TX5OzOJpfZ")
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
df2 <- df1[,2:3]
library(zoo)
library(tidyverse)
library(EVDS)
library(lubridate)
devtools::install_github("algopoly/EVDS")
devtools::install_github("algopoly/EVDS",force=T)
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
df1 <- as.data.frame(get_series(series ="TP.AKONUTSAT2.TOPLAM", start_date = "01-03-2013",end_date ="01-03-2021"))
library(tidyverse)
library(EVDS)
library(lubridate)
library(zoo)
set_evds_key("TX5OzOJpfZ")
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
View(df1)
df1
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("lubridate")
install.packages("zoo")
install.packages("devtools")
devtools::install_github("algopoly/EVDS")
library(EVDS)
library(tidyverse)
library(lubridate)
library(zoo)
set_evds_key("TX5OzOJpfZ")
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
set_evds_key("TX5OzOJpfZ")
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df1
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df1
library(tidyverse)
library(EVDS)
library(tidyverse)
library(lubridate)
library(zoo)
install.packages("tidyverse")
install.packages("tidyverse")
library(EVDS)
set_evds_key("TX5OzOJpfZ")
library(EVDS)
library(tidyverse)
library(lubridate)
library(zoo)
df3 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
df1
set_evds_key("TX5OzOJpfZ")
df1 <- (get_series(series =c("TP.AKONUTSAT2.TOPLAM","TP.KTF12"), start_date = "01-03-2013",end_date ="01-03-2021"))
library(devtools)
devtools::install_github("algopoly/EVDS")
library(EVDS)
set_evds_key("TX5OzOJpfZ")
dolar_import <- as.data.frame(get_series(series= c("TP.DK.USD.A.YTL"), start_date="15-01-2018" , end_date="15-01-2021"))
dolar_evds<- na.omit(dolar_import[,2:3])
colnames(dolar_evds) <-  c("Date" , "ExchangeRate")
dolar_evds$Date <-as.Date(dolar_evds$Date, format= "%d-%m-%Y")
dolar_evds$ExchangeRate <- as.numeric(dolar_evds$ExchangeRate)
set_evds_key("TX5OzOJpfZ")
cpi_import <- as.data.frame(get_series(series= c("TP.FG.J0"), start_date="15-01-2018" , end_date="15-01-2021"))
v1 <- c(0.8,.6,.4,.5)
v2 <- rep(mean(v1),4)
v1-v2
(v1-v2)^2
sum((v1-v2)^2)
install.packages(caret)
install.packages("caret")
library(caret)
set.seed(425)
split = sample.split(iris, SplitRatio = 0.7)
train = subset(iris, subset = split==TRUE)
test = subset(iris, subset = split==FALSE)
library(caTools)
set.seed(425)
split = sample.split(iris, SplitRatio = 0.7)
train = subset(iris, subset = split==TRUE)
test = subset(iris, subset = split==FALSE)
ctrl1 = trainControl(method = "repeatedcv", number = 10, repeats = 5)
grid1 = expand.grid(ntree = seq(100, 500, by = 100), mtry = 1, sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1 = expand.grid(ntree = seq(100, 500, by = 100), mtry = 3, sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1 = expand.grid(ntree = seq(100, 500, by = 100), mtry = 1:5, sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1 = expand.grid(ntree = seq(100, 500, by = 100), mtry = 1, sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1 = expand.grid(ntree = seq(100, 500, by = 100),  sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1 = expand.grid(ntree = seq(100, 500, by = 100), mtry=1, sampsize = nrow(train), nodesize = 5)
m1 = train(Species~., data = iris,
method = "rf",
trControl = ctrl1,
tuneGrid = grid1)
grid1
?randomforest
?randomForest
library(tidyverse)
library(data.table)
library(lubridate)
library(forecast)
library(ggplot)
library(zoo)
library(urca)
library(ggplot)
library(ggplot2)
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_csv("epias2.csv"))
df$Date <- as.Date(df$Date, format = "%d.%m.%Y")
df$DateTime <- paste(df$Date,df$Time)
df$DateTime <- as.POSIXct(df$DateTime,format="%Y-%m-%d %H:%M" ,tz="UTC")
df <- df[,4:3]
df$Consumption <- df$Consumption*1000
head(df)
df[2067,2] <- 28413.3
df[2067,]
df[which.min(Consumption)]
df[DateTime=="2016-03-27 02:00:00" , Consumption ]
df[DateTime=="2016-03-27 02:00:00" , Consumption:= 28413.3]
df[DateTime=="2016-03-27 02:00:00 "]
ggplot(df, aes(x=DateTime , y=Consumption)) +
geom_line() +
labs(title = "Electricity Consumption", x="Date" )
summary(ur.kpss(df$Consumption))
#hourly decompose
hourly_ts <- ts(df$Consumption,frequency = 24)
hourly_dec <- decompose(hourly_ts,type ="additive")
plot(hourly_dec)
plot(hourly_dec$random)
daily_ts <- ts(df$Consumption,frequency = 24*7)
daily_dec <- decompose(daily_ts,type ="additive")
plot(daily_dec)
monthly_ts <- ts(df$Consumption,frequency = (24*7*52))
monthly_dec <- decompose(monthly_ts,type="additive")
df[,monthly:=as.numeric(monthly_dec$seasonal)]
df[,daily:=as.numeric(daily_dec$seasonal)]
df[,hourly:=as.numeric(hourly_dec$seasonal)]
ggplot(df[1:24*2], aes(x=DateTime, y=hourly)) +
geom_line() +
geom_point() +
labs(title="Hourly Seasonality" , x="Date", y="Hourly Effect" )
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
df <- df[,Seasonality:=as.numeric(daily_dec$seasonal)]
df <- df[,Trend:=as.numeric(daily_dec$trend)]
df <- df[,Random:=as.numeric(daily_dec$random)]
summary(ur.kpss(daily_dec$random))
ggAcf(daily_dec$random, lag.max = 168) +
labs(title = "ACF of the random component")
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
##AAAARRRRR
ar1 <-  arima(df[,Random], order = c(1,0,0))
ar2 <-  arima(df[,Random], order = c(2,0,0))
ar3 <-  arima(df[,Random], order = c(3,0,0))
ar4 <-  arima(df[,Random], order = c(4,0,0))
ar5 <-  arima(df[,Random], order = c(5,0,0))
AIC_ar <- c(ar1=AIC(ar1), ar2=AIC(ar2) , ar3=AIC(ar3), ar4=AIC(ar4) , ar5= AIC(ar5))
which.min(AIC_ar)
ma1 <-  arima(df[,Random], order = c(0,0,1))
ma2 <-  arima(df[,Random], order = c(0,0,2))
ma3 <-  arima(df[,Random], order = c(0,0,3))
ma4 <-  arima(df[,Random], order = c(0,0,4))
ma5 <-  arima(df[,Random], order = c(0,0,5))
AIC_ma <- c(ma1=AIC(ma1),ma2=AIC(ma2), ma3=AIC(ma3) , ma4=AIC(ma4),ma5=AIC(ma5))
which.min(AIC_ma)
arma1 <-arima(df[,Random], order = c(5,0,5))
AIC(arma1)
arma2 <- arima(df[,Random], order = c(4,0,4))
AIC(arma2)
df[,Residuals:=residuals(arma2)]
df[,fitted:=Random - Residuals]
df[,fitted:=as.numeric(fitted) +as.numeric(Trend) + as.numeric(Seasonality)]
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " & DateTime<="2016-03-29 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
last_trend <- tail(daily_dec$trend[!is.na(daily_dec$trend)],1)
seasonal_effect <- daily_dec$seasonal[46765:47208]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
accu=function(actual,forecast) {
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
bias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
MAD=sum(abs(error))/n
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,bias,MAPE,WMAPE)
return(l) }
dfdf[,accu(actuals, forecasts)]
accu <- accu(actual,forecast)
error <- actual-forecast
error <- actual-forecast
error <- actual-forecasted
accu <- accu(actual-forecasted)
accu <- accu(actual,forecasted)
accu
dfdf <- dfdf[,error:=actuals-forecasts]
View(dfdf)
dfdf <- as.data.table(dfdf)
dfdf <- dfdf[,error:=actuals-forecasts]
View(df)
View(dfdf)
dfdf <- dfdf[,APE:= abs(error/actuals)]
metrics <- dfdf[ , .DailyMAPE = sum(ape) /24 , DailyBias = sum(bias) /24 , by=.(Date=as.Date(DateTime))]
metrics <- dfdf[ , .(DailyMAPE = sum(ape) /24 , DailyBias = sum(bias) /24) , by=.(Date=as.Date(DateTime))]
metrics <- dfdf[ , .(DailyMAPE = sum(APE) /24 , DailyBias = sum(bias) /24) , by=.(Date=as.Date(DateTime))]
dfdf <- dfdf[,bias:= (error/actuals)]
metrics <- dfdf[ , .(DailyMAPE = sum(APE) /24 , DailyBias = sum(bias) /24) , by=.(Date=as.Date(DateTime))]
metrics
AIC(arma2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(data.table)
library(zoo)
library(urca)
library(forecast)
library(tidyverse)
library(lubridate)
AIC(arma2)
AIC(arma2)
arma2 <- arima(df[,Random], order = c(4,0,4))
AIC(arma2)
AIC(arma2)
AIC(arma1)
df <- df[,Random:=as.numeric(daily_dec$random)]
df <- df[,Seasonality:=as.numeric(daily_dec$seasonal)]
df <- df[,Trend:=as.numeric(daily_dec$trend)]
df <- df[,Random:=as.numeric(daily_dec$random)]
AIC(arma2)
arma2 <- arima(df[,Random], order = c(4,0,4))
arma2 <- arima(df[,Random], order = c(4,0,4))
AIC(arma2)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(data.table)
library(zoo)
library(urca)
library(forecast)
library(tidyverse)
library(lubridate)
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_csv("epias2.csv"))
df$Date <- as.Date(df$Date, format = "%d.%m.%Y")
df$DateTime <- paste(df$Date,df$Time)
df$DateTime <- as.POSIXct(df$DateTime,format="%Y-%m-%d %H:%M" ,tz="UTC")
df <- df[,4:3]
df$Consumption <- df$Consumption*1000
head(df)
df[DateTime=="2016-03-26 02:00:00" , Consumption ]
df[DateTime=="2016-03-27 02:00:00" , Consumption ]
df[2067,2] <- 28413.3
ggplot(df, aes(x=DateTime , y=Consumption)) +
geom_line() +
labs(title = "Electricity Consumption", x="Date" )
summary(ur.kpss(df$Consumption))
hourly_ts <- ts(df$Consumption,frequency = 24)
hourly_dec <- decompose(hourly_ts,type ="additive")
df[,hourly:=as.numeric(hourly_dec$seasonal)]
plot(hourly_dec)
ggplot(df[1:24*2], aes(x=DateTime, y=hourly)) +
geom_line() +
geom_point() +
labs(title="Hourly Seasonality" , x="Date", y="Hourly Effect" )
plot(hourly_dec$random)
daily_ts <- ts(df$Consumption,frequency = 24*7)
daily_dec <- decompose(daily_ts,type ="additive")
df[,daily:=as.numeric(daily_dec$seasonal)]
plot(daily_dec)
ggplot(df[1:168*2], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
plot(daily_dec$random)
monthly_ts <- ts(df$Consumption,frequency = 24*7*52)
monthly_dec <- decompose(monthly_ts,type="additive")
df[,monthly:=as.numeric(monthly_dec$seasonal)]
plot(monthly_dec)
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
plot(monthly_dec$random)
plot(daily_dec)
df <- df[,Random:=as.numeric(daily_dec$random)]
df <- df[,Seasonality:=as.numeric(daily_dec$seasonal)]
df <- df[,Trend:=as.numeric(daily_dec$trend)]
ggplot(df[1:168*2], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
plot(daily_dec$random)
summary(ur.kpss(daily_dec$random))
ggAcf(daily_dec$random, lag.max = 168) +
labs(title = "ACF of the random component")
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
ar1 <-  arima(df[,Random], order = c(1,0,0))
ar2 <-  arima(df[,Random], order = c(2,0,0))
ar3 <-  arima(df[,Random], order = c(3,0,0))
ar4 <-  arima(df[,Random], order = c(4,0,0))
ar5 <-  arima(df[,Random], order = c(5,0,0))
AIC_ar <- c(ar1=AIC(ar1), ar2=AIC(ar2) , ar3=AIC(ar3), ar4=AIC(ar4) , ar5= AIC(ar5))
which.min(AIC_ar)
ma1 <-  arima(df[,Random], order = c(0,0,1))
ma2 <-  arima(df[,Random], order = c(0,0,2))
ma3 <-  arima(df[,Random], order = c(0,0,3))
ma4 <-  arima(df[,Random], order = c(0,0,4))
ma5 <-  arima(df[,Random], order = c(0,0,5))
AIC_ma <- c(ma1=AIC(ma1),ma2=AIC(ma2), ma3=AIC(ma3) , ma4=AIC(ma4),ma5=AIC(ma5))
which.min(AIC_ma)
arma1 <-arima(df[,Random], order = c(5,0,5))
View(ma1)
AIC(arma1)
AIC(arma2)
