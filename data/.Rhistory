summary(fit4)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
fit5 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up), data = df )
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
summary(fit6)
checkresiduals(fit6)
#simdiye kadar en iyisi fit2 oldu
fitted(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
plot(fit6)
checkresiduals(fit6)
#fitted vs residual bakalım
ggplot(df,aes(x=Fitted, y=Residuals)) +
geom_point() +
geom_smooth() +
scale_y_continuous(breaks = seq(-30000,30000,length.out = 5)) +
labs(title="Fitted vs Residuals" , x= "Fitted" , y= "Residuals")  +
xlim(0,50000)
#fitted vs actual bakalım
ggplot(df,aes(x=Fitted, y=MortgagedSales)) +
geom_point() +
geom_abline(slope = 1,intercept = 0,color="blue") +
xlim(0,60000)+
ylim(0,60000)
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
getwd()
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
library(zoo)
library(tidyverse)
library(lubridate)
library(readxl)
library(data.table)
library(fpp)
library(GGally)
getwd()
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_excel("evds.csv"))
str(df)
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
knitr::opts_chunk$set(echo = FALSE)
library(zoo)
library(tidyverse)
library(lubridate)
library(readxl)
library(data.table)
library(fpp)
library(GGally)
getwd()
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_excel("evds.csv"))
str(df)
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
head(df)
ggplot(df,aes(Date)) +
geom_line(aes(y=MortgagedSales)) +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60)) +
labs(title="Mortgaged House Sales over Time" , x= "Date" , y= "Number of Sales")
ggplot(df,aes(MortgagedSales)) +
geom_histogram() +
scale_x_continuous(n.breaks = 10) +
labs(title = "Histogram of number of mortgaged house sales" , x= "Number of Sales", y= "Count")+
ylim(0,20)
ggpairs(df[,.(MortgagedSales,InterestRate,Probability,Construction)])
fit1 <- lm(MortgagedSales ~ InterestRate + Probability + Construction ,data=df)
summary(fit1)
checkresiduals(fit1)
df[,Trend:=1:.N]
fit2 <- lm(MortgagedSales ~ InterestRate + Probability + Trend,data=df)
summary(fit2)
Month <- 1:12
df <- cbind(df,Month)
Quarter <- c(1,1,1,2,2,2,3,3,3,4,4,4)
df <- cbind(df,Quarter)
fit3 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Month), data=df)
fit4 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Quarter), data=df)
summary(fit3)
summary(fit4)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
fit5 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up), data = df )
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
summary(fit6)
checkresiduals(fit6)
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
#simdiye kadar en iyisi fit2 oldu
fitted(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
plot(fit6)
geom_smooth() +
scale_y_continuous(breaks = seq(-30000,30000,length.out = 5)) +
labs(title="Fitted vs Residuals" , x= "Fitted" , y= "Residuals")  +
xlim(0,50000)
#fitted vs actual bakalım
ggplot(df,aes(x=Fitted, y=MortgagedSales)) +
geom_point() +
geom_abline(slope = 1,intercept = 0,color="blue") +
xlim(0,60000)+
ylim(0,60000)
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
View(df)
df <-  rbind(df, as.Date("2021-04-15" , format="%Y-%m-%d"))
df <-  rbind(df, as.Date("2021-04-15" , format="%Y-%m-%d"), fill=T)
tail(df)
df <-  rbind(df, 2, fill=T)
tail
df <-  rbind(df, 2, fill=T)
tail
df <-  rbind(df, data.table(Date=as.Date("2021-04-15")), fill=T)
tail
df <-  rbind(df, data.table(Date=as.Date("2021-04-15")), fill=T)
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
tail
View(df)
rm(df)
df <- as.data.table(read_excel("evds.csv"))
str(df)
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
df[,Trend:=1:.N]
df <- cbind(df,Month)
df <- cbind(df,Quarter)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
tail
til(df)
tail(df)
df[,Trend:=.N]
tail(df)
df[,Trend:=1:.N]
tail(df)
df[Trend==100, Month=4]
df[Trend==100, Month:=4]
tail(df)
df[Trend==100,Quarter:=2]
April_Prob <- df[Date>="2021-03-15" , mean(Probability)]
April_Prob <- df[Date>="2021-03-15" , mean(Probability), na.rm=T]
April_Prob <- df[Date>="2021-03-15" , mean(Probability, na.rm=T)]
April_Interest <- df[Date>="2021-03-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", Month:=4]
df[Date=="2021-04-15",Quarter:=2]
April_Prob <- df[Date>="2021-03-15" , mean(Probability, na.rm=T)]
April_Interest <- df[Date>="2021-03-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
View(df)
df[is.na(Interest_Up)==T, Interest_Up:=0]
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
View(df)
df[Date=="2021-04-15", Probbility:=April_Prob]
df[Date=="2021-04-15", InterestRate:=April_Interest]
View(df)
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
df[Date=="2021-04-15", Probbility:=April_Prob]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", InterestRate:=April_Interest]
View(df)
predict(fit6)
predict(fit6, df[,is.na(Fitted)==T])
predict(fit6, df[,is.na(Fitted)=T])
predict(fit6, df[,is.na(Fitted)==T])
fitted(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
View(df)
df[Date=="2021-04-15", Probability:=April_Prob]
predict(fit6, df[,is.na(Fitted)==T])
df <- as.data.table(read_excel("evds.csv"))
str(df)
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
df[,Trend:=1:.N]
#month eklendi
Month <- 1:12
df <- cbind(df,Month)
Quarter <- c(1,1,1,2,2,2,3,3,3,4,4,4)
df <- cbind(df,Quarter)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
summary(fit6)
#simdiye kadar en iyisi fit2 oldu
fitted(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
#fitted vs residual bakalım
ggplot(df,aes(x=Fitted, y=Residuals)) +
geom_point() +
geom_smooth() +
scale_y_continuous(breaks = seq(-30000,30000,length.out = 5)) +
labs(title="Fitted vs Residuals" , x= "Fitted" , y= "Residuals")  +
xlim(0,50000)
#fitted vs actual bakalım
ggplot(df,aes(x=Fitted, y=MortgagedSales)) +
geom_point() +
geom_abline(slope = 1,intercept = 0,color="blue") +
xlim(0,60000)+
ylim(0,60000)
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
df[,Trend:=1:.N]
df[Date=="2021-04-15", Month:=4]
df[Date=="2021-04-15",Quarter:=2]
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
df[Date=="2021-04-15", Probability:=April_Prob]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", InterestRate:=April_Interest]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
View(df)
predict(fit6, df[,is.na(Fitted)==T])
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
View(df)
df[Date=="2021-04-15" , Fitted]
df[Date=="2021-04-15" , Fitted]
round(df[Date=="2021-04-15" , Fitted])
prediction <- df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
prediction <- df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
rm(predict())
rm(prediction)
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
View(df)
prediction <- round(df[Date=="2021-04-15" , Fitted])
##
predict(fit6, data.frame(Date="2021-04-15", InterestRate=18.036, Probability=10.4864,Interest_Up=0, Interest_Down=0,Trend=100))
prediction <- round(df[Date=="2021-04-15" , Fitted])
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
prediction <- round(df[Date=="2021-04-15" , Fitted])
prediction
prediction <- round(df[Date=="2021-04-15" , Fitted])
prediction
##
x <- £
##
x <- 3
paste(x)
df <- as.data.table(read_excel("evds.csv"))
str(df)
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
df[,Trend:=1:.N]
#month eklendi
Month <- 1:12
df <- cbind(df,Month)
Quarter <- c(1,1,1,2,2,2,3,3,3,4,4,4)
df <- cbind(df,Quarter)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
#simdiye kadar en iyisi fit2 oldu
fitted(fit6)
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
#simdiye kadar en iyisi fit2 oldu
fitted(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
df[,Trend:=1:.N]
df[Date=="2021-04-15", Month:=4]
df[Date=="2021-04-15",Quarter:=2]
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
df[Date=="2021-04-15", Probability:=April_Prob]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", InterestRate:=April_Interest]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
View(df)
prediction <- round(df[Date=="2021-04-15" , Fitted])
prediction
df[Date=="2021-02-15" , Fitted]
df[Date=="2021-02-15" , Residual]
df[Date=="2021-02-15" , Residual]
View(df)
df[Date=="2021-02-15" , Residuals]
3+6
knitr::opts_chunk$set(echo = FALSE)
library(zoo)
library(tidyverse)
library(lubridate)
library(readxl)
library(data.table)
library(fpp)
library(GGally)
getwd()
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_excel("evds.csv"))
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
head(df)
ggplot(df,aes(Date)) +
geom_line(aes(y=MortgagedSales)) +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60)) +
labs(title="Mortgaged House Sales over Time" , x= "Date" , y= "Number of Sales")
ggplot(df,aes(MortgagedSales)) +
geom_histogram() +
scale_x_continuous(n.breaks = 10) +
labs(title = "Histogram of number of mortgaged house sales" , x= "Number of Sales", y= "Count")+
ylim(0,20)
ggpairs(df[,.(MortgagedSales,InterestRate,Probability,Construction)])
fit1 <- lm(MortgagedSales ~ InterestRate + Probability + Construction ,data=df)
summary(fit1)
checkresiduals(fit1)
df[,Trend:=1:.N]
fit2 <- lm(MortgagedSales ~ InterestRate + Probability + Trend,data=df)
summary(fit2)
Month <- 1:12
df <- cbind(df,Month)
Quarter <- c(1,1,1,2,2,2,3,3,3,4,4,4)
df <- cbind(df,Quarter)
fit3 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Month), data=df)
fit4 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Quarter), data=df)
summary(fit3)
summary(fit4)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
fit5 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up), data = df )
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
summary(fit6)
checkresiduals(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
ggplot(df,aes(x=Fitted, y=MortgagedSales)) +
geom_point() +
geom_abline(slope = 1,intercept = 0,color="blue") +
xlim(0,60000)+
ylim(0,60000)
ggplot(df,aes(x=Fitted, y=Residuals)) +
geom_point() +
geom_smooth() +
scale_y_continuous(breaks = seq(-30000,30000,length.out = 5)) +
labs(title="Fitted vs Residuals" , x= "Fitted" , y= "Residuals")  +
xlim(0,50000)
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
df[,Trend:=1:.N]
df[Date=="2021-04-15", Month:=4]
df[Date=="2021-04-15",Quarter:=2]
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
df[Date=="2021-04-15", Probbility:=April_Prob]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", InterestRate:=April_Interest]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
round(df[Date=="2021-04-15" , Fitted])
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
prediction <- round(df[Date=="2021-04-15" , Fitted])
prediction
predict(fit6, df[is.na(Fitted)==T])
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
prediction <- round(df[Date=="2021-04-15" , Fitted])
prediction
df[Date=="2021-02-15" , Residuals]
paste(round(df[Date=="2021-04-15" , Fitted]))
knitr::opts_chunk$set(echo = FALSE)
library(zoo)
library(tidyverse)
library(lubridate)
library(readxl)
library(data.table)
library(fpp)
library(GGally)
getwd()
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_excel("evds.csv"))
days <- (rep(15,99))
df$Date <- paste(df$Date,days,sep = "-")
df$Date <- as.Date(df$Date,format = "%Y-%m-%d")
head(df)
ggplot(df,aes(Date)) +
geom_line(aes(y=MortgagedSales)) +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60)) +
labs(title="Mortgaged House Sales over Time" , x= "Date" , y= "Number of Sales")
ggplot(df,aes(MortgagedSales)) +
geom_histogram() +
scale_x_continuous(n.breaks = 10) +
labs(title = "Histogram of number of mortgaged house sales" , x= "Number of Sales", y= "Count")+
ylim(0,20)
ggpairs(df[,.(MortgagedSales,InterestRate,Probability,Construction)])
fit1 <- lm(MortgagedSales ~ InterestRate + Probability + Construction ,data=df)
summary(fit1)
checkresiduals(fit1)
df[,Trend:=1:.N]
fit2 <- lm(MortgagedSales ~ InterestRate + Probability + Trend,data=df)
summary(fit2)
Month <- 1:12
df <- cbind(df,Month)
Quarter <- c(1,1,1,2,2,2,3,3,3,4,4,4)
df <- cbind(df,Quarter)
fit3 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Month), data=df)
fit4 <- lm(MortgagedSales ~ InterestRate + Probability + Trend + as.factor(Quarter), data=df)
summary(fit3)
summary(fit4)
df[Date %between% c("2018-09-15" , "2019-02-15"), Interest_Up:=1]
df[is.na(Interest_Up)==T, Interest_Up:=0]
fit5 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up), data = df )
df[Date %between% c("2020-06-15" , "2020-07-15"), Interest_Down:=1]
df[is.na(Interest_Down)==T, Interest_Down:=0]
fit6 <- lm(MortgagedSales ~ InterestRate + Trend + Probability + as.factor(Interest_Up) + as.factor(Interest_Down), data = df )
summary(fit6)
checkresiduals(fit6)
df[,Fitted:=fitted(fit6)]
df[,Residuals:=residuals(fit6)]
ggplot(df,aes(Date)) +
geom_line(aes(y=Fitted , color='Fitted')) +
geom_line(aes(y=MortgagedSales, color='MortgagedSales')) +
labs(title="Fitted and Actual Number of Mortgaged House Sales" ,x="Date" , y= "Number of Sales") +
scale_x_date(date_breaks = "10 months", limits = as.Date(c("2013-01-15", "2021-03-15"))) +
scale_y_continuous(breaks = seq(10000,130000,length.out = 7)) +
theme(axis.text.x = element_text(angle = 60))
ggplot(df,aes(x=Fitted, y=MortgagedSales)) +
geom_point() +
geom_abline(slope = 1,intercept = 0,color="blue") +
xlim(0,60000)+
ylim(0,60000)
ggplot(df,aes(x=Fitted, y=Residuals)) +
geom_point() +
geom_smooth() +
scale_y_continuous(breaks = seq(-30000,30000,length.out = 5)) +
labs(title="Fitted vs Residuals" , x= "Fitted" , y= "Residuals")  +
xlim(0,50000)
df <-  rbind(df, data.table(Date=as.Date("2021-04-15" , format = "%Y-%m-%d")), fill=T)
df[,Trend:=1:.N]
df[Date=="2021-04-15", Month:=4]
df[Date=="2021-04-15",Quarter:=2]
April_Prob <- df[Date>="2021-01-15" , mean(Probability, na.rm=T)]
df[Date=="2021-04-15", Probability:=April_Prob]
April_Interest <- df[Date>="2021-01-15" , mean(InterestRate, na.rm = T)]
df[Date=="2021-04-15", InterestRate:=April_Interest]
df[Date=="2021-04-15", Interest_Up:=0]
df[Date=="2021-04-15", Interest_Down:=0]
predict(fit6, df[is.na(Fitted)==T])
df[is.na(Fitted)==T, Fitted:=predict(fit6, df[is.na(Fitted)==T])]
