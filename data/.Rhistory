plot(monthly_dec)
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
plot(monthly_dec)
plot(daily_dec)
plot(daily_dec)
plot(daily_dec)
plot(monthly_dec)
plot(monthly_dec$random)
plot(daily_dec$random)
plot(monthly_dec$random)
plot(daily_dec$random)
monthly_ts <- ts(df$Consumption,frequency = (24*7*52))
monthly_dec <- decompose(monthly_ts,type="additive")
plot(monthly_dec)
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
monthly_ts <- ts(df$Consumption,frequency = (24*7*52))
monthly_dec <- decompose(monthly_ts,type="additive")
plot(monthly_dec)
ggplot(df[1:24*2], aes(x=DateTime, y=hourly)) +
geom_line() +
geom_point() +
labs(title="Hourly Seasonality" , x="Date", y="Hourly Effect" )
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
monthly_ts <- ts(df$Consumption,frequency = (24*7*52))
monthly_dec <- decompose(monthly_ts,type="additive")
plot(monthly_dec)
plot(daily_dec)
plot(daily_dec$random)
plot(hourly_dec$random)
plot(daily_dec$random)
plot(monthly_dec$random)
dec_daily
daily_dec
plot(daily_dec)
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(168*23)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(168*33)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(168*3)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
plot(daily_dec)
df <- df[,Seasonality:=as.integer(daily_dec$seasonal)]
df <- df[,Trend:=as.numeric(daily_dec$trend)]
View(df)
df <- df[,Trend:=as.numeric(daily_dec$trend)]
setwd("/Users/ahmetguden/Desktop/GitHub/spring21-ahmetguden/data")
df <- as.data.table(read_csv("epias2.csv"))
df$Date <- as.Date(df$Date, format = "%d.%m.%Y")
df$DateTime <- paste(df$Date,df$Time)
df$DateTime <- as.POSIXct(df$DateTime,format="%Y-%m-%d %H:%M" ,tz="UTC")
df <- df[,4:3]
df$Consumption <- df$Consumption*1000
head(df)
df[2067,2] <- 28413.3
df[2067,]
df[which.min(Consumption)]
df[DateTime=="2016-03-27 02:00:00" , Consumption ]
df[DateTime=="2016-03-27 02:00:00" , Consumption:= 28413.3]
df[DateTime=="2016-03-27 02:00:00 "]
ggplot(df, aes(x=DateTime , y=Consumption)) +
geom_line() +
labs(title = "Electricity Consumption", x="Date" )
summary(ur.kpss(df$Consumption))
#hourly decompose
hourly_ts <- ts(df$Consumption,frequency = 24)
hourly_dec <- decompose(hourly_ts,type ="additive")
plot(hourly_dec)
plot(hourly_dec$random)
daily_ts <- ts(df$Consumption,frequency = 24*7)
daily_dec <- decompose(daily_ts,type ="additive")
plot(daily_dec)
plot(daily_dec$random)
monthly_ts <- ts(df$Consumption,frequency = (24*7*52))
monthly_dec <- decompose(monthly_ts,type="additive")
plot(monthly_dec)
plot(monthly_dec$random)
df[,monthly:=as.numeric(monthly_dec$seasonal)]
df[,daily:=as.numeric(daily_dec$seasonal)]
df[,hourly:=as.numeric(hourly_dec$seasonal)]
ggplot(df[1:24*2], aes(x=DateTime, y=hourly)) +
geom_line() +
geom_point() +
labs(title="Hourly Seasonality" , x="Date", y="Hourly Effect" )
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(8736*2)], aes(x=DateTime, y=monthly)) +
geom_line() +
geom_point() +
labs(title="Monthly Seasonality" , x="Date", y="Monthly Effect" )
df <- df[,Trend:=as.numeric(daily_dec$trend)]
View(df)
ggplot(df[1:(168*2)], aes(x=DateTime, y=daily)) +
geom_line() +
geom_point() +
labs(title="Daily Seasonality" , x="Date", y="Daily Effect" )
ggplot(df[1:(168*2)], aes(x=DateTime, y=Trend)) +
geom_line() +
geom_point() +
labs(title="Trend" , x="Date", y="Trend Effect" )
ggplot(df, aes(x=DateTime, y=Trend)) +
geom_line() +
geom_point() +
labs(title="Trend" , x="Date", y="Trend Effect" )
ggplot(df, aes(x=DateTime, y=Trend)) +
geom_line() +
labs(title="Trend" , x="Date", y="Trend Effect" )
df <- df[,Seasonality:=as.numeric(daily_dec$seasonal)]
View(df)
plot(daily_dec)
ggplot(df, aes(x=DateTime, y=Trend)) +
geom_line() +
labs(title="Trend" , x="Date", y="Trend Effect" )
plot(daily_dec$random)
summary(ur.kpss(daily_dec$random))
ggAcf(daily_dec$random)
ggAcf(daily_dec$random, lag.max = 30)
ggAcf(daily_dec$random, lag.max = 30) +
theme_bw()
ggPacf(daily_dec$random, lag.max = 30) +
labs(title = "PACF of the random component")
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
ggAcf(daily_dec$random, lag.max = 168) +
labs(title = "ACF of the random component")
ar1 <-  arima(consumption[,random], order = c(1,0,0))
ar2 <-  arima(consumption[,random], order = c(2,0,0))
ar3 <-  arima(consumption[,random], order = c(3,0,0))
ar4 <-  arima(consumption[,random], order = c(4,0,0))
ar5 <-  arima(consumption[,random], order = c(5,0,0))
View(df)
df <- df[,Random:=as.numeric(daily_dec$random)]
View(df)
ar1 <-  arima(df[,random], order = c(1,0,0))
ar2 <-  arima(consumption[,random], order = c(2,0,0))
ar1 <-  arima(df[,Random], order = c(1,0,0))
plot(monthly_dec$trend)
ar1 <-  arima(df[,Random], order = c(1,0,0))
ar1 <-  arima(df[,Random], order = c(1,0,0))
ar2 <-  arima(df[,Random], order = c(2,0,0))
ar3 <-  arima(df[,Random], order = c(3,0,0))
ar4 <-  arima(df[,Random], order = c(4,0,0))
ar5 <-  arima(df[,Random], order = c(5,0,0))
c(ar1=AIC(ar1))
c(ar1=AIC(ar1), ar2=AIC(ar2) , ar3=AIC(ar3), ar4=AIC(ar4) , ar5= AIC(ar5))
AIC_ar <- c(ar1=AIC(ar1), ar2=AIC(ar2) , ar3=AIC(ar3), ar4=AIC(ar4) , ar5= AIC(ar5))
which.min(AIC_ar)
ar6 <-  arima(df[,Random], order = c(6,0,0))
AIC(ar6)
ma1 <-  arima(df[,Random], order = c(0,0,1))
ma2 <-  arima(df[,Random], order = c(0,0,2))
ma3 <-  arima(df[,Random], order = c(0,0,3))
ma4 <-  arima(df[,Random], order = c(0,0,4))
AIC_ma <- c(ma1=AIC(ma1),ma2=AIC(ma2), ma3=AIC(ma3) , ma4=AIC(ma4),ma5=AIC(ma5))
ma5 <-  arima(df[,Random], order = c(0,0,5))
AIC_ma <- c(ma1=AIC(ma1),ma2=AIC(ma2), ma3=AIC(ma3) , ma4=AIC(ma4),ma5=AIC(ma5))
AIC_ma
which.min(AIC_ma)
arma1 <-arima(df[,Random], order = c(5,0,5))
AIC(arma1)
AIC(arma1)
AIC_ma
AIC_ar
summary(ar1)
summary(arma)
summary(arma1)
arma2 <- arima(df[,Random], order = c(3,0,3))
AIC(arma1)
AIC(arma2)
arma2 <- arima(df[,Random], order = c(3,0,3))
AIC(arma2)
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
ggAcf(daily_dec$random, lag.max = 168) +
labs(title = "ACF of the random component")
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
ggAcf(daily_dec$random, lag.max = 168) +
labs(title = "ACF of the random component")
ggPacf(daily_dec$random, lag.max = 168) +
labs(title = "PACF of the random component")
AIC(arma2)
AIC(arma1)
arma3 <- arima(df[,Random], order = c(2,0,3))
AIC(arma3)
arma3 <- arima(df[,Random], order = c(3,0,2))
AIC(arma3)
arma3 <- arima(df[,Random], order = c(3,0,2))
AIC(arma3)
arma3 <- arima(df[,Random], order = c(2,0,2))
AIC(arma3)
arma3 <- arima(df[,Random], order = c(4,0,2))
AIC(arma3)
AIC(arma4)
arma4 <- arima(df[,Random], order = c(4,0,4))
AIC(arma4)
arma5 <- arima(df[,Random], order = c(4,0,4))
AIC(arma5)
arma5 <- arima(df[,Random], order = c(3,0,4))
AIC(arma5)
AIC(arma2)
summary(arma1)
AIC(arma1)
AIC(arma2)
AIC(arma4)
AIC(arma5)
arma2 <- arima(df[,Random], order = c(4,0,4))
AIC(arma2)
AIC(arma1)
which.min(AIC_ma)
AIC_ma <- c(ma1=AIC(ma1),ma2=AIC(ma2), ma3=AIC(ma3) , ma4=AIC(ma4),ma5=AIC(ma5))
AIC_ma
AIC_ar
summary(arma2)
arma2$coef
arma2$residuals
residuals(arma2)
df[,residuals:=Resiudals(arma2)]
df[,Residuals:=resiudals(arma2)]
df[,fitted:=Random - Residuals]
df[,Residuals:=resiudals(arma2)]
df[,Residuals:=residuals(arma2)]
df[,fitted:=Random - Residuals]
df[,fitted:=as.numeric(fitted) +as.numeric(Trend) + as.numeric(Seasonality)]
View(df)
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption)) +
geom_line(aes(y=fitted))
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted))
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted), col="fitted")
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted), col="fitted")
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted), col="fitted")
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted"))
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
theme_bw()
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df, aes(x=DateTime<="2016-06-19 14:00:00")) +
ggplot(df, aes(x=DateTime<="2016-06-19 14:00:00")) +
ggplot(df, aes(x=DateTime<="2016-06-19 14:00:00")) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime<="2016-06-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime<="2016-03-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " && DateTime<="2016-06-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " && DateTime<="2016-06-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " & DateTime<="2016-06-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " & DateTime<="2016-04-19 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df[DateTime>="2016-03-19 14:00:00 " & DateTime<="2016-03-29 14:00:00"], aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
ggplot(df, aes(x=DateTime)) +
geom_line(aes(y=Consumption, col="actual")) +
geom_line(aes(y=fitted, col="fitted")) +
labs(title = "Fitted and actual values of consumption over time" , x="Date" )
View(df)
last_trend <- tail(daily_dec$trend[!is.na(daily_dec$trend)],1)
daily_dec$seasonal[.N]
seasonal_effect <- daily_dec$seasonal[(46849-84):47208]
seasonal_effect <- daily_dec$seasonal[(46849-84):47208]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
forecasted
forecasted-actual
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
df <- df[,Forecasted:=forecasted]
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
dfdf
View(dfdf)
dfdf <- cbind(dfdf,df[(47208-360):47208,1])
dfdf <- cbind(dfdf,df[((47208-360):47208),1])
dfdf <- cbind(dfdf,df[46848:47208,1])
forecast_dates <- df[46848:47208,1]
View(forecast_dates)
forecast_dates <- df[46849:47208,1]
class(forecast_dates)
forecast_dates <-as.POSIXct(df[46849:47208,1])
forecast_dates <-as.vector(df[46849:47208,1])
forecast_dates_date <- as.POSIXct(forecast_dates)
View(forecast_dates)
str(forecast_dates)
dfdf <- cbind(dfdf,forecast_dates])
dfdf <- cbind(dfdf,forecast_dates)
View(dfdf)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts"))
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
seasonal_effect <- daily_dec$seasonal[(46849):47208]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
(47208 -84 ) %% 168
seasonal_effect <- daily_dec$seasonal[1:443]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
seasonal_effect <- daily_dec$seasonal[(29305-84):29664]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
seasonal_effect <- daily_dec$seasonal[1:443]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
model_forecast <- ts(model_forecast, frequency = 168, start("2021-05-06 00:00:00"))
model_forecast <- model_forecast + last_trend + seasonal_effect
model_forecast <- ts(model_forecast, frequency = 168, start("2021-05-06 00:00:00"))
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
last_trend <- tail(daily_dec$trend[!is.na(daily_dec$trend)],1)
seasonal_effect <- daily_dec$seasonal[1:443]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
seasonal_effect <- daily_dec$seasonal[46764:47208]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
seasonal_effect <- daily_dec$seasonal[46765:47208]
model_forecast <- predict(arma2, n.ahead = (15*24) + 84)$pred
model_forecast <- model_forecast + last_trend + seasonal_effect
forecasted <- tail(model_forecast, (15*24))
actual <- tail(df$Consumption, (15*24))
dfdf <- data.frame(forecasts=forecasted,actuals=actual)
forecast_dates <-as.vector(df[46849:47208,1])
dfdf <- cbind(dfdf,forecast_dates)
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
accu=function(actual,forecast){
accu=function(actual,forecast) {
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
bias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
MAD=sum(abs(error))/n
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,bias,MAPE,WMAPE)
return(l) }
accu=function(actuals,forecasts) {
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
bias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
MAD=sum(abs(error))/n
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,bias,MAPE,WMAPE)
return(l) }
accu=function(actual,forecast) {
n=length(actual)
error=actual-forecast
mean=mean(actual)
sd=sd(actual)
CV=sd/mean
bias=sum(error)/sum(actual)
MAPE=sum(abs(error/actual))/n
MAD=sum(abs(error))/n
WMAPE=MAD/mean
l=data.frame(n,mean,sd,CV,bias,MAPE,WMAPE)
return(l) }
accu <- accu(actual,forecasted)
accu
summary(accu)
dfdf[,accu(actuals, forecasts)]
dfdf[,accu(actuals, forecasts)]
dfdf[,accu(actuals, forecasts)]
dfdf
head(dfdf)
3+5
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
dfdf[,accu(actuals, forecasts)]
ggplot(dfdf, aes(x=DateTime)) +
geom_line(aes(y=actuals , col="actual")) +
geom_line(aes(y=forecasts, col="forecasts")) +
labs(title="Actual values vs Forecasts" , x="Date" , y="Consumption")
dfdf[,accu(actuals, forecasts)]
x <- 3
x
forecasted <- tail(model_forecast, (15*24))
